@using KwasantWeb.ViewModels

@{ Layout = "~/Views/Shared/_Layout.cshtml"; }
@section immediateScripts
{
    @Scripts.Render("~/bundles/js/jquery")
    @Scripts.Render("~/bundles/js/jqueryvalidate")
    <script src="/Content/js/Kwasant/Popup.js"></script>
}
@section scripts
{
    @Scripts.Render("~/bundles/js/modernizr")
    @Scripts.Render("~/bundles/js/bootstrap")
}
@section styles
{
    @Styles.Render("~/bundles/css/bootstrap30")
    @Styles.Render("~/bundles/css/backendcss")

    <style>
        .handIcon {
            cursor: pointer;
        }
        .eventWindowRendererTemplate {
            border-color: #D3B9B9;
            padding: 5px;
            margin: 10px;
            border-style: solid;
            border-width: 1px;
        } 
    </style>
}

<h2>We need clarification about the following to finish booking your event:</h2>

<div id="eventWindowRendererTemplate" class="eventWindowRendererTemplate">

</div>

@foreach (NegotiationResponseQuestionViewModel question in Model.Questions)
{
    <div class="formItem">
        <label>Question : </label>
        @question.Text
    </div>
    <div class="formItem">
        @foreach (var ans in question.Answers)
        {
            <label>
                <input type="radio" name="@question.Id" value="@ans.Id" @Html.Raw(question.SelectedAnswerID == ans.Id ? "checked" : String.Empty) />   
                @Html.Raw(question.AnswerType == "Text" ? ans.Text : "Timeslot")
            </label><br />
        }
        @if (question.AnswerType == "Text")
        {
            <label>
                <input type="radio" name="@question.Id" data-type="Text" value="suggestion" @Html.Raw(!String.IsNullOrEmpty(question.SelectedText) ? "checked" : String.Empty) />
                Suggest your own answer<br />
            </label>
            //We don't need a check for the selected text. Either it's empty, or they picked a different answer.
            <input type="text" style="margin-left: 16px;" value="@Html.Raw(question.SelectedText)" id="@question.Id" /><br />
        } else if (question.AnswerType == "Timeslot")
        {
            <div id="@Html.Raw(question.Id + "_EventWindowRendererOption")">
            </div>
            <label>
                <input type="radio" name="@question.Id" data-type="Timeslot" value="suggestion" @Html.Raw(question.SelectedCalendarID != null ? "checked" : String.Empty) />
                Suggest your own answer<br />
            </label>
            <a class="handIcon" questionID="@question.Id" calendarid="@Html.Raw(question.SelectedCalendarID == null ? "null" : question.SelectedCalendarID.ToString())" id="@Html.Raw(question.Id + "_EventWindow")" onclick=" startEventWindowSelection(this); ">Pick Times</a>
            <div id="@Html.Raw(question.Id + "_EventWindowRenderer")">
            </div>
            <br />
            <br />
        }
    </div>
}

<div class="space">
    <div style="clear: both">
        <div style="float: left">
            <input type="button" value="send" onclick="sendthis();" />
        </div>
    </div>
    <br />
    <br />
</div>

<script type="text/javascript">
    $(function() {
        $("input[type='radio']").change(updateEnabledControls);
        updateEnabledControls();
        $('#eventWindowRendererTemplate').hide();
        @foreach (NegotiationResponseQuestionViewModel question in Model.Questions)
        {
            @:questionEventWindows = [];
            foreach (var calendarEvent in question.CalendarEvents)
            {
                @:var startDate = new Date(@calendarEvent.StartDate.Year, (@calendarEvent.StartDate.Month - 1), @calendarEvent.StartDate.Day, @calendarEvent.StartDate.Hour, @calendarEvent.StartDate.Minute, @calendarEvent.StartDate.Millisecond)
                        @:var endDate = new Date(@calendarEvent.EndDate.Year, (@calendarEvent.EndDate.Month - 1), @calendarEvent.EndDate.Day, @calendarEvent.EndDate.Hour, @calendarEvent.EndDate.Minute, @calendarEvent.EndDate.Millisecond)

    			@:questionEventWindows.push({
@:  startDate: startDate.toDateString(),
                @:  startTime: startDate.getHours() + ':' + padMins(startDate.getMinutes()),
                @:  endDate: endDate.toDateString(),
                @:  endTime: endDate.getHours() + ':' + padMins(endDate.getMinutes()),
                            @:});

            }
        @:renderEvents($('#' + '@question.Id.ToString()' + '_EventWindowRenderer'), questionEventWindows);
                        }
        
        @foreach (NegotiationResponseQuestionViewModel question in Model.Questions)
        {
            foreach (NegotiationResponseAnswerViewModel answer in question.Answers)
            {
                @:questionEventWindows = [];
                foreach (var calendarEvent in answer.CalendarEvents)
                {

                    @:var startDate = new Date(@calendarEvent.StartDate.Year, (@calendarEvent.StartDate.Month - 1), @calendarEvent.StartDate.Day, @calendarEvent.StartDate.Hour, @calendarEvent.StartDate.Minute, @calendarEvent.StartDate.Millisecond)
                    @:var endDate = new Date(@calendarEvent.EndDate.Year, (@calendarEvent.EndDate.Month - 1), @calendarEvent.EndDate.Day, @calendarEvent.EndDate.Hour, @calendarEvent.EndDate.Minute, @calendarEvent.EndDate.Millisecond)

                    @:questionEventWindows.push({
                    @:  startDate: startDate.toDateString(),
                    @:  startTime: startDate.getHours() + ':' + padMins(startDate.getMinutes()),
                    @:  endDate: endDate.toDateString(),
                    @:  endTime: endDate.getHours() + ':' + padMins(endDate.getMinutes()),
                    @:});

                }
                @:renderEvents($('#' + '@question.Id.ToString()' + '_EventWindowRendererOption'), questionEventWindows);
            }
        }
    });
    
    function updateEnabledControls() {
        $("input[type='radio']").each(function() {
            if (this.checked) {
                $('#' + this.name).prop('disabled', true);
                $('#' + this.name + "_EventWindow").hide();
                
                if ($(this).attr("data-type") == "Text") {
                    $('#' + this.name).prop('disabled', false);
                } else if ($(this).attr("data-type") == "Timeslot") {
                    $('#' + this.name + "_EventWindow").show();    
                }
            }
        });
    }
    
    function startEventWindowSelection(holder) {
        var calendarID = $(holder).attr('calendarID');
        if (calendarID === "null")
            calendarID = null;

        var launchCalendar = function(calID) {
            $(holder).attr('calendarID', calID);
            Kwasant.IFrame.Display('/Calendar/GetSpecificCalendar?calendarID=' + calID,
                {
                    horizontalAlign: 'left',
                    callback: function(result) {
                        renderEvents($('#' + $(holder).attr('questionID') + "_EventWindowRenderer"), $.map(result.events, function(elem, index) {
                            return {
                                startDate: elem.start.d.toDateString(),
                                startTime: elem.start.getHours() + ':' + padMins(elem.start.getMinutes()),

                                endDate: elem.end.d.toDateString(),
                                endTime: elem.end.getHours() + ':' + padMins(elem.end.getMinutes())
                            };
                        }));
                    }

                });
        };

        if (calendarID == null) {
            Kwasant.IFrame.DispatchUrlRequest('/Question/EditTimeslots?calendarID=null&negotiationID=@Model.Id', launchCalendar);
        } else {
            launchCalendar(calendarID);
        }
    }
    
    function padMins(mins) {
        if (mins < 10)
            return mins + '0';
        return mins;
    }
    
    function renderEvents(renderer, events) {
        renderer.empty();

        for (var i = 0; i < events.length; i++) {
            var currEvent = events[i];
            var eventStr = currEvent.startDate + ' ' + currEvent.startTime + ' - ' + currEvent.endTime;

            var clonedHTML = $('#eventWindowRendererTemplate').clone();
            clonedHTML.html(eventStr);

            renderer.append(clonedHTML);
            clonedHTML.show();
        }
    }

    function sendthis() {
        var response = {};
        response.NegotiationID = @Model.Id;
        
        var answers = [];
        $("input[type='radio']").each(function () {
            if (this.checked) {
                if (this.value != "suggestion") {
                    answers.push({ QuestionID: this.name, AnswerID: this.value});
                }
                else if ($(this).attr("data-type") == "Text") {
                    answers.push({ QuestionID: this.name, Response: $('#' + this.name).val()});
                }else if ($(this).attr("data-type") == "Timeslot") {
                    answers.push({ QuestionID: this.name, CalendarID: $('#' + this.name + "_EventWindow").attr('calendarID')});
                }
            }
        });
        response.Responses = answers;
        var data = JSON.stringify(response);

        $.ajax({
            type: "POST",
            dataType: 'json',
            contentType: 'application/json',
            url: '@Url.Action("ProcessResponse", "NegotiationResponse")',
            data: data
        })
            .always(function(result) {
                var newDoc = document.open("text/html", "replace");
                newDoc.write(result.responseText);
                newDoc.close();
            });
    };
</script>