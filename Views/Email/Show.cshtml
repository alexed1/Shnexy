@using Newtonsoft.Json
@model KwasantWeb.ViewModels.BookingRequestAdminVM
@{ Layout = "~/Views/Shared/_Blank.cshtml"; }
@Styles.Render("~/bundles/css/bootstrap30")
@Styles.Render("~/bundles/css/backendcss")
@Styles.Render("~/bundles/css/colorbox")

<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,800,700,300,600,400italic&subset=latin,cyrillic' rel='stylesheet' type='text/css'>
<script src="~/Content/js/jquery.js"></script>
<script src="~/Scripts/ContextMenu/jquery.contextMenu.js"></script>
<link href="~/Content/ContextMenu/jquery.contextMenu.css" rel="stylesheet" />
<link href="~/Content/css/backendcss/default.css" rel="stylesheet" />

<style>
    .view-popup-window {
        padding: 0px;
    }

    td {
        font-weight: 200;
        line-height: 31.4285736083984px;
        height: 34px;
    }
</style>

<div class="email-info-section">
    <div class="info">
        <div id="emailSubject" class="subHeading email-subject">
            <h4 class="with-border">@Model.Subject</h4>
        </div>
        <div class="email-details with-border">
            <table width="100%">
                <tr>
                    <td class="displayLabel">From:</td>
                    <td>@Model.FromName</td>
                </tr>
                <tr>
                    <td class="displayLabel">To:</td>
                    <td>@Model.EmailTo</td>
                </tr>
                <tr>
                    <td class="displayLabel">CC:</td>
                    <td>@Model.EmailCC</td>
                </tr>
                <tr class="emailBCC">
                    <td class="displayLabel">BCC:</td>
                    <td>@Model.EmailBCC</td>
                </tr>
                <tr class="emailAttachments">
                    <td class="displayLabel">Attachments:</td>
                    <td>@Html.Raw(Model.EmailAttachments)</td>
                </tr>
                <tr>
                    <td class="displayLabel">Booker:</td>
                    <td id="tdbookerinfo">@Model.Booker
                        @(Model.Booker != "none" && !Model.ReadOnly ? Html.Raw("<span style='padding-left: 15px;'><a href='javascript:void(0);' onclick='javascript:releaseBooker(" + Model.BookingRequestId + ")'>Release</a></span>") : Html.Raw(""))
                    </td>
                </tr>
            </table>
        </div>
        <div id="conversations" class="email-conversations">
        </div>
    </div>
    <div class="context-menu box menu-1"></div>
    <script type="text/javascript">
        function releaseBooker(requestId) {
            $.ajax({
                url: "/BookingRequest/ReleaseBooker",
                type: "POST",
                data: { bookingRequestId: requestId },
                success: function () {
                    $("#tdbookerinfo").html("none");
                }
            });
        }
    </script>
</div>

<script src="~/Content/js/Kwasant/quickcopy.js"></script>
<script type="text/javascript">
    $(document).ready(function (){
        if('@Model.EmailBCC' == "")
        { $('.emailBCC').css('display','none');}

        if('@Model.EmailAttachments' == "")
        { $('.emailAttachments').css('display','none');}

    });
    function refreshConversation() {
        $('#conversations').css('opacity', 0.5);
        $.get('/Email/GetConversationMembers?emailID=@Model.BookingRequestId', function(result) {
            if (result !== null) {
                $('#conversations').empty();
                displayConversation(result);
                $('#conversations').css('opacity', 1);
            }
        });
    }
    
    function displayConversation(conversationMembers) {
        var performedExplicitExpand = false;

        var displayConvoMember = function(conversationMember, ind) {
            var convoHolder = $('<div class="email-message">');

            var convoHeader = $('<div class="message-header">');
            convoHeader.append("<span class='email-address'>" + conversationMember.FromEmailAddress + "</span>");
            convoHeader.append("<span class='date-received'>" + conversationMember.DateRecieved + "</span>");

            var chevron = $('<span class="glyphicon glyphicon-chevron-right pull-left"></span>');
            convoHeader.prepend(chevron);

            var convoBody = $('<div>');
            convoBody
                .addClass('email-content');
            convoBody.html(conversationMember.Body);

            var resetStyles = function(expanded) {
                if (expanded) {
                    chevron.removeClass("glyphicon-chevron-right").addClass("glyphicon-chevron-down");    
                } else {
                    chevron.removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-right");                        
                }
            };

            var doingAnimation = false;
            var isExpanded = false;
            chevron.click(function() {
                if (doingAnimation)
                    return;
                doingAnimation = true;
                if (isExpanded) {
                    convoBody.slideUp(function() { resetStyles(false); doingAnimation = false; });
                    isExpanded = false;
                } else {
                    convoBody.slideDown(function() { resetStyles(true); doingAnimation = false; });
                    isExpanded = true;
                }
                
            });

            //If we explicitly opened other conversations, don't open the last email by default
            if (conversationMember.ExplicitOpen) {
                isExpanded = true;
                resetStyles(true);
                performedExplicitExpand = true;
            } else {
                if (performedExplicitExpand || ind < conversationMembers.length - 1) {
                    convoBody.hide();
                } else {
                    isExpanded = true;
                    resetStyles(true);
                }
            }

            convoHolder.append(convoHeader);
            convoHolder.append(convoBody);

            $('#conversations').append(convoHolder);
        };

        for (var ind = conversationMembers.length - 1; ind >= 0; ind--) {
            displayConvoMember(conversationMembers[ind], ind);
        }
    }

    $(function () {
        var conversationMembers = @Html.Raw(JsonConvert.SerializeObject(Model.Conversations, Formatting.Indented));
        displayConversation(conversationMembers);
    });
</script>
