@using System.Text
@model KwasantWeb.ViewModels.CreateEmailVM
@{ Layout = "~/Views/Shared/_Blank.cshtml"; }
@Styles.Render("~/bundles/css/bootstrap30")
@Styles.Render("~/bundles/css/backendcss")
@Styles.Render("~/bundles/css/colorbox")

<script src="~/Content/js/Kwasant/Popup.js"></script>
<script src="~/Content/js/jquery.js"></script>
<script src="~/Scripts/ContextMenu/jquery.contextMenu.js"></script>
<link href="~/Content/ContextMenu/jquery.contextMenu.css" rel="stylesheet" />
<link href="~/Content/css/backendcss/default.css" rel="stylesheet" />
<script src="~/Content/js/jquery-ui.js"></script>
<link href="~/Content/css/EmailSend.css" rel="stylesheet"/>
<script src="~/Content/js/select2.js"></script>
<link href="~/Content/css/additionalcss/select2/select2.css" rel="stylesheet"/>
<script src="~/Content/js/jquery.validate.js"></script>
<link href="~/Content/css/jquery-ui.css" rel="stylesheet"/>

<script>
    function updateHiddenField() {
        var res = $('#toAddresses li');
        if (res.length > 0)
            $('#toAddressesHidden').val('a');
        else
            $('#toAddressesHidden').val('');
        if (validator)
            validator.form();
    }
    $(function () {
        var toAddressesDom = $('#toAddresses').get(0);

        $(".draggable").sortable({
            connectWith: ".draggable",
            
            //The below is to make jquery.validate work with our list
            receive: function (event, ui) {
                if (this == toAddressesDom ||
                    ui.sender[0] == toAddressesDom) {
                    updateHiddenField();
                }
            }
        }).disableSelection();

        updateHiddenField();
        
        $('#attendeeText').select2({
            createSearchChoice: function (term) {
                return { id: term, text: term };
            },
            validateFormat: function (term) {
                if (isValidEmail(term)) {
                    return null;
                }
                return 'Invalid Email';
            },
            multiple: true,
            data: [],
            width: '100%',
        });
        $('#attendeeText').on('change', function(ev) {
            var newEmail = ev.added.text;
            $('#attendeeText').select2('val', '');
            $('#addressBook').append("<li>" + newEmail + "</li>");
        });
    });   

    function isValidEmail(term) {
        var atIndex = term.indexOf('@@');
        var dotIndex = term.lastIndexOf('.');
        if (atIndex > 0 //We need something before the at sign
            && dotIndex > atIndex + 1 //We need a dot, and it should have at least one character between the at and the dot
            && dotIndex < term.length - 1 //The dot can't be at the end
        )
            return true;
        return false;
    }
</script>

<script type="text/javascript">
    function insertText(textToInsert) {
        $("#bodyText").insertAtCaret(textToInsert);
        return false;
    }

    $.fn.insertAtCaret = function (myValue) {
        return this.each(function () {
            //IE support
            if (document.selection) {
                this.focus();
                var sel = document.selection.createRange();
                sel.text = myValue;
                this.focus();
            }
                //MOZILLA / NETSCAPE support
            else if (this.selectionStart || this.selectionStart == '0') {
                var startPos = this.selectionStart;
                var endPos = this.selectionEnd;
                var scrollTop = this.scrollTop;
                this.value = this.value.substring(0, startPos) + myValue + this.value.substring(endPos, this.value.length);
                this.focus();
                this.selectionStart = startPos + myValue.length;
                this.selectionEnd = startPos + myValue.length;
                this.scrollTop = scrollTop;
            } else {
                this.value += myValue;
                this.focus();
            }
        });
    };
    $(function () {
        @{
            var uniqueAddresses = new HashSet<String>(Model.AddressBook.Union(Model.ToAddresses).Union(Model.CCAddresses).Union(Model.BCCAddresses).Select(address => address.ToLower()));

            var appendTo = new Func<String, IList<String>, String>((id, list) =>
            {
                var returnString = new StringBuilder();
                returnString.Append("var " + id + "list = $('#" + id + "');");
                foreach (var toAddress in list)
                {
                    if (uniqueAddresses.Contains(toAddress))
                    {
                        uniqueAddresses.Remove(toAddress);
                        returnString.Append(id + "list.append($('<li>" + toAddress + "</li>'));");
                    }
                }
                return returnString.ToString();
            });
        }
        @Html.Raw(appendTo("toAddresses", Model.ToAddresses))
        @Html.Raw(appendTo("ccAddresses", Model.CCAddresses))
        @Html.Raw(appendTo("bccAddresses", Model.BCCAddresses))
        @Html.Raw(appendTo("addressBook", Model.AddressBook))

        updateHiddenField();

        @foreach (var link in Model.InsertLinks)
        {
            @:$('#@link.Id').click(function () { insertText('@Html.Raw(link.TextToInsert)') });
                }

    });

    var validator;
    
    function sendEmail() {
        validator = $("#thisisaform").validate({
            ignore: "",
            rules: {
                toAddressesHidden: {
                    required: true
                },
                subj: {
                    required: true,
                    minlength: 5
                }
            }
        });
        validator.form();
        if (!validator.valid())
            return;
        

        var getAddresses = function (selector) {
            return $(selector).map(function () { return this.textContent; }).get();
        };

        var addressBook = getAddresses('#addressBook li');
        var toAddresses = getAddresses('#toAddresses li');
        var ccAddresses = getAddresses('#ccAddresses li');
        var bccAddresses = getAddresses('#bccAddresses li');
        var subject = $('#subj').val();
        var body = $('#bodyText').val();

        var data = {
            AddressBook: addressBook,
            ToAddresses: toAddresses,
            CCAddresses: ccAddresses,
            BCCAddresses: bccAddresses,
            Subject: subject,
            CallbackToken: '@Model.CallbackToken',
            Body: body
        };

        var spinner = Kwasant.IFrame.DisplaySpinner();
        $.ajax({
            type: "POST",
            dataType: 'json',
            contentType: 'application/json',
            url: '/Email/HandleSend',
            data: JSON.stringify(data)
        })
            .success(function (result) {
                Kwasant.IFrame.CloseMe(result);
            })
            .fail(function () {
                alert('An error occured on the server. Your changes have not been saved.');
            })
            .always(function () {
                if (spinner !== null) {
                    spinner.hide();
                }
            });

    }

</script>


<form id="thisisaform">
    <div class="email-info-section" style="max-height: 1000px; min-height: 800px; height: 800px; width: 800px;">
        @if (!String.IsNullOrWhiteSpace(Model.HeaderText))
        {
            <h4 style="text-align: center; color: #D62C2C">@Model.HeaderText</h4>
        }
        <div style="float:left; width:30%">
            <h4 style="width:200px; text-align:center">Address book</h4>
            <ul id="addressBook" class="draggable addressBook"></ul>
            <div style="width:200px; margin-top:5px;">
                <input id="attendeeText" class="addAttendeeInput" type="text" placeholder="Enter a new recipient..." />
            </div>
        </div>
        <div style="float:right; width:70%; margin-top:10px;">
            <div class="info">

                <div class="email-details with-border">
                    <table style="width:100%; border-collapse: collapse">
                        <tr>
                            <td class="">Subject:</td>
                            <td>
                                <input id="subj" name="subj" type="text" class="addressField" placeholder="Enter subject..." value="@Model.Subject" required @Html.Raw(!Model.SubjectEditable ? "disabled" : String.Empty) />
                            </td>
                        </tr>
                        <tr>
                            <td class="">To:</td>
                            <td>
                                <ul id="toAddresses" class="addressField draggable"></ul>
                                <input id="toAddressesHidden" name="toAddressesHidden" type="hidden" required />
                            </td>
                        </tr>
                        <tr>
                            <td class="">CC:</td>
                            <td>
                                <ul id="ccAddresses" class="addressField draggable"></ul>
                            </td>
                        </tr>
                        <tr>
                            <td class="">BCC:</td>
                            <td>
                                <ul id="bccAddresses" class="addressField draggable"></ul>
                            </td>
                        </tr>
                    </table>
                    @if (Model.InsertLinks.Any())
                    {
                        <div style="margin: 5px; padding: 5px; border: solid 1px">
                            @foreach (var link in Model.InsertLinks)
                            {
                                @:<a id="@link.Id" href="javascript:void(0);">@link.DisplayName</a>
                        }
                        </div>
                    }
                </div>

            </div>
            <div class="">
                <textarea id="bodyText" name="bodyText" style="width:100%;height:310px; -moz-resize:none; -ms-resize:none; -o-resize:none; resize:none;" placeholder="@Model.BodyPromptText" @Html.Raw(Model.BodyRequired ? "required" : String.Empty)>@Model.Body</textarea>
            </div>
            <div class="space form-actions negotiation-form-actions">
                <input id="btnSend" type="button" value="Send" class="btn pull-left small-dialog-button shadow-button" onclick="sendEmail()" />

                <a href="javascript:Kwasant.IFrame.CloseMe(false);" class="btn cancel-btn small-dialog-button shadow-button pull-left" style="margin-left:5px;">Cancel</a>
            </div>
        </div>
    </div>
</form>