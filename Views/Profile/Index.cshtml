@using KwasantCore.Helper
@using Newtonsoft.Json
@model KwasantWeb.ViewModels.ProfileVM
@section immediateScripts
{
    @Scripts.Render("~/bundles/js/kwasantpopup")
    <script src="/Content/js/tree.jquery.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="/Content/css/jqtree.css" />
    <style type="text/css">
        #myTree {
            -ms-border-radius: 5px;
            border-radius: 5px;
            background: #F3BC74;
            min-height: 450px;
            padding: 5px;
            border: 1px solid #AD8652;
        }
        .infoBox {
            min-height: 450px;
            background: #F3BC74;
            -ms-border-radius: 5px;
            border-radius: 5px;
            padding: 10px;
            border: 1px solid #AD8652;
        }
        td {
            width: 50%;
        }
        table {
            width: 100%;
            margin-top: 5px;
            margin-bottom: 15px;
        }
        input {
            width: 100%;
            padding: 5px;
        }
        #treeOptions a, #infoBox a {
            color: #d85e17;
            margin: 10px;
        }
        #treeOptions {
            margin: 5px;
        }
    </style>
}
<div class="page-title-action">
    <a href="/Profile/ProfilesForUser?userID=@Model.UserId">Back to profiles for user</a>
    <h2 style="width:100%">Profile '@Model.Name' for user '@Model.UserName'</h2>
    <div style="clear:both"></div>
    <div id="treeOptions">
        <a id="newNode" href="javascript:void(0)">New node</a>
        <a id="deleteNode" href="javascript:void(0)">Delete node</a>
        <a id="temp" href="javascript:void(0);">Save data</a>
    </div>
    <div class="container">
        <div class="row">
            <div id="myTree" class="col-xs-6"> </div>
            
            <div id="infoBox" class="col-xs-6 infoBox">
                Select a profile node to see its details
            </div>
        </div>
    </div>
</div>
<table class="data-table dataTable"></table>
<script type="text/javascript">
    var internalNodes = [];
    var tree;
    function addTree() {
        internalNodes = [];
        addNodeRecursively(tree.tree('getTree'));
    }

    function addNodeRecursively(node) {
        if (!node.node_class)
            internalNodes.push(node);
        if(node.children)
            for (var child in node.children)
                addNodeRecursively(node.children[child]);
    }
    $(function() {
        var data = @Html.Raw(JsonConvert.SerializeObject(Model.Nodes, Formatting.Indented, new JsonSerializerSettings {ContractResolver = new JSONLowercaseContractResolver()}));
        
        var newNodeButton = $('#newNode');
        tree = $('#myTree').tree({
            data: data,
            autoOpen: true,
            dragAndDrop: true
        });
        tree.bind('tree.click', function(ev) {
            displayProfileNode(ev.node);
        });

        addTree();

        $('#deleteNode').click(function() {
            var selectedNode = tree.tree('getSelectedNode');
            tree.tree('removeNode', selectedNode);
            addTree();
        });

        newNodeButton.click(function() {
            tree.tree(
                'appendNode',
                {
                    label: 'New node',
                }
            );
            addTree();
        });
        
        function serializeNode(node) {
            var children = [];
            if (node.children)
                children = node.children;
            var items;
            var name;
            if (node.getNewName)
                name = node.getNewName();
            else
                name = node.name;

            if (node.getNewItems)
                items = node.getNewItems();
            else
                items = node.items;
            return {
                Label: name,
                Id: node.id,
                Items: items,
                Children: $.map(children, function(i, o) { return serializeNode(i); })
            };
        }

        $('#temp').click(function() {
            var arr = [];
            $.each(internalNodes, function(i, o) {
                if (o.parent.parent == null) {
                    arr.push(serializeNode(o));
                }
            });

            var finalObject = {};
            finalObject.Id = @Model.Id;
            finalObject.Nodes = arr;

            var spinner = Kwasant.IFrame.DisplaySpinner();
            $.ajax({
                type: "POST",
                dataType: 'json',
                contentType: 'application/json',
                url: '/Profile/UpdateProfile',
                data: JSON.stringify(finalObject),
            }).always(function() {
                spinner.hide();
            });

        });
    });
    
    function displayProfileNode(node) {
        var name;
        var items;
        if (node.getNewItems === undefined) {
            node.internalItemGets = [];
            node.getNewItems = function() {
                var returnArr = [];
                for (var index in node.internalItemGets) {
                    var res = node.internalItemGets[index]();
                    if (res != null)
                        returnArr.push(res);
                }
                return returnArr;
            };
            node.getNewName = function() {
                return nameInput.val();
            };
            items = node.items;
            name = node.name;
        } else {
            items = node.getNewItems();
            name = node.getNewName();

            node.internalItemGets = [];
        }        

        var infoBox = $('#infoBox');
        infoBox.empty();      

        var nodeName = $('<label />').html('Name: ');
        var nameInput = $('<input type="text" value="' + name + '" />');

        nodeName.append(nameInput);
        infoBox.append(nodeName);
        var table = $('<table />');       

        var addRowFunc = function(id, itemKey, itemValue, immediate) {
            var tableRow = $('<tr>');
            var inputID = $('<input type="hidden" value="' + id + '" />');
            tableRow.append(inputID);
            var inputKey = $('<input type="text" value="' + itemKey + '" prompt="Enter item name" />');
            tableRow.append($('<td>').append(inputKey));
            var inputValue = $('<input type="text" value="' + itemValue + '" prompt="Enter item value" />');
            tableRow.append($('<td>').append(inputValue));

            var removed = false;
            node.internalItemGets.push(function() {
                if (removed)
                    return null;
                
                return {
                    Id: inputID.val(),
                    ItemName: inputKey.val(),
                    ItemValue: inputValue.val()
                };
            });
            
            var removeRowButton = $('<a href="javascript:void(0);">Remove</a>');
            tableRow.append($('<td style="width:10%">').append(removeRowButton));
            if (immediate) {
                table.append(tableRow);
            } else {
                table.append(tableRow);
                tableRow
                    .find('td')
                    .wrapInner('<div style="display: none;" />')
                    .parent()
                    .find('td > div')
                    .slideDown(500, function() {
                        var $set = $(this);
                        $set.replaceWith($set.contents());
                    });
            }

            removeRowButton.click(function() {
                tableRow
                    .find('td')
                    .wrapInner('<div style="display: block;" />')
                    .parent()
                    .find('td > div')
                    .slideUp(500, function() {
                        $(this).parent().parent().remove();
                        removed = true;
                    });
            });
        };

        if (items)  
        {
            $.each(items, function(i, o) {
                if (o.itemname)
                    addRowFunc(o.id, o.itemname, o.itemvalue, true);
                else
                    addRowFunc(o.Id, o.ItemName, o.ItemValue, true);
            });
        }
        infoBox.append(table);
        var addNewRowButton = $('<a href="javascript:void(0);">Add new row</a>');
        infoBox.append(addNewRowButton);
        addNewRowButton.click(function() {
            addRowFunc(null, '', '', false);
        });
    }
</script>