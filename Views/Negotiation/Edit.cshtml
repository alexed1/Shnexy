@using Data.States
@model KwasantWeb.ViewModels.NegotiationVM
@{ Layout = "~/Views/Shared/_Blank.cshtml"; }
@section bodyStyle {overflow-y:scroll;}
@section immediateScripts
{
    @Scripts.Render("~/bundles/js/jquery")
    @Scripts.Render("~/bundles/js/select2")    
    @Scripts.Render("~/bundles/js/jqueryvalidate")

    <script src="/Content/js/Kwasant/Popup.js"></script>
    <script>
    $(function() {
        $('#questionContainer').hide();
        $('#textAnswerContainer').hide();
        $('#eventWindowAnswerContainer').hide();
        $('#eventWindowRendererTemplate').hide();

        //Now we setup our values
        $('#NegName').val('@Model.Name');

        data = [@Html.Raw(String.Join(",", Model.Attendees.Select(a =>
                                "{id: '" + a + "', text: '" + a + "'}"
                                )))];

        $('#attendeesSel').select2({
            createSearchChoice: function (term) {
                return { id: term, text: term };
            },
            validateFormat: function (term) {
                if (!isEmail(term))
                    return "Invalid Email";
                return null;
            },
            multiple: true,
            data: [],
            width: '100%',
        });
        $('#attendeesSel').select2('data', data);

        @{
            @:var question;
            @:var answer;
            foreach (var question in Model.Questions)
            {
                @:question = $(addQuestion(true));

                @:question.attr('questionID', @question.Id);
                @:question.attr('calendarID', @(question.CalendarID == null ? "null" : question.CalendarID.ToString()));
                @:question.attr('questionStatus', @question.Status);
                @:question.find('#questionText').val("@question.Text");
                @:question.find('input[type="radio"][group="questionType"]').filter(function () { return $(this).val() === "@question.AnswerType"; }).get(0).checked = true;
                    
                foreach (var answer in question.Answers)
                {
                    @:answer = $(addAnswer(question, true));
                    @:answer.attr('answerID', @answer.Id);
                    if (!String.IsNullOrEmpty(answer.Text))
                    {
                        @:answer.find('#answerText').val('@answer.Text');
                        @:answer.find('#answerStatus').val('@answer.Status');
                    }

                    @:questionEventWindows = [];
                    foreach (var calendarEvent in question.CalendarEvents)
                    {
                        @:var startDate = new Date(@calendarEvent.StartDate.Year, (@calendarEvent.StartDate.Month - 1), @calendarEvent.StartDate.Day, @calendarEvent.StartDate.Hour, @calendarEvent.StartDate.Minute, @calendarEvent.StartDate.Millisecond)
                        @:var endDate = new Date(@calendarEvent.EndDate.Year, (@calendarEvent.EndDate.Month - 1), @calendarEvent.EndDate.Day, @calendarEvent.EndDate.Hour, @calendarEvent.EndDate.Minute, @calendarEvent.EndDate.Millisecond)

    					@:questionEventWindows.push({
                            @:  startDate: startDate.toDateString(),
                            @:  startTime: startDate.getHours() + ':' + startDate.getMinutes(),
    						@:
                            @:  endDate: endDate.toDateString(),
                            @:  endTime: endDate.getHours() + ':' + endDate.getMinutes(),
                        @:});
                    }
                        
                    @:renderEvents(answer, questionEventWindows);
                }
            }
        }
    });

    var negID = @(Model.Id == null ? "null" : Model.Id.ToString());


    function getNegotiationData() {
        var negotiation = {};
        negotiation.Name = $('#NegName').val();
        negotiation.BookingRequestID = @Model.BookingRequestID;
        negotiation.Id = negID;
        negotiation.State = @Model.State;

        var selectedAttendees = $('#attendeesSel').val();
        var attendees = [];
        if (selectedAttendees != "")
            attendees = selectedAttendees.split(',');
        negotiation.Attendees = attendees;

        negotiation.Questions = $.map($('#appendquestinoId .questionBox'), function(element) {
            element = $(element);
            var questionID = element.attr('questionID');
            var calendarID = element.attr('calendarID');
            var questionStatus = element.attr('questionStatus');
            var negotiationID = negotiation.Id = negID;
            var questionText = element.find('#questionText').val();
            var selectedType = element.find('input[type="radio"][group="questionType"]').filter(function() {
                return $(this).get(0).checked;
            }).val();

            var answerID;
            var textAnswers = $.map(element.find('#appendanswerId .answerBox'), function(answerElement) {
                answerElement = $(answerElement);
                answerID = answerElement.attr('answerID');
                var answerText = answerElement.find('#answerText').val();
                var answerStatus = answerElement.find('#answerStatus').val();

                return { ID: answerID, QuestionID: questionID, Text: answerText, Status: answerStatus };
            });

            var eventWindowAnswers = $.map(element.find('#appendanswerId .eventWindowAnswerBox'), function(answerElement) {
                answerElement = $(answerElement);
                answerID = answerElement.attr('answerID');

                return { ID: answerID, QuestionID: questionID, AnswerState: @AnswerState.Unstarted };
            });

            var i;
            var answers = [];
            for (i = 0; i < textAnswers.length; i++)
                answers.push(textAnswers[i]);
            for (i = 0; i < eventWindowAnswers.length; i++)
                answers.push(eventWindowAnswers[i]);

            return { Id: questionID, CalendarID: calendarID, NegotiationID: negotiationID, Status : questionStatus, Text: questionText, AnswerType: selectedType, Answers: answers };
        });
        return negotiation;
    }

    function submitNegotiation() {
        var spinner = Kwasant.IFrame.DisplaySpinner();

        var negotiation = getNegotiationData();
        
        //Do checks here.
        var validationErrors = [];
        $.each(negotiation.Questions, function(index, obj) {
            if (obj.Text === undefined ||
                obj.Text === null ||
                obj.Text === '') {
                validationErrors.push('Please provide text for every question.');
            }
        });
        
        if (validationErrors.length > 0) {
            var errorMessage = "Please resolve the following issues before saving: \n";

            $.each(validationErrors, function(index, error) {
                errorMessage += "\n - " + error;
            });

            alert(errorMessage);
            spinner.hide();
            return;
        }

        $.ajax({
            type: "POST",
            dataType: 'json',
            contentType: 'application/json',
            url: '/Negotiation/ProcessSubmittedForm',
            data: JSON.stringify(negotiation)
        })
        .success(function(negotiationID) {
            Kwasant.IFrame.CloseMe(negotiationID);
        })
        .fail(function() {
            alert('An error occured on the server. Your changes have not been saved.');
        })
        .always(function() {
            if (spinner !== null) {
                spinner.hide();
            }
        });
    }

    function addQuestion(immediate) {
        var clonedHTML = $('#questionContainer').clone();

        var radioButtons = clonedHTML.find('input[type="radio"][group="questionType"]');
        var newGroupName = guid();
        radioButtons.attr('name', newGroupName);

        clonedHTML.attr('questionStatus', @QuestionState.Unanswered);

        $('#appendquestinoId').append(clonedHTML);
        if (immediate)
            clonedHTML.show();
        else
            clonedHTML.slideDown();
        return clonedHTML;
    }

    function startEventWindowSelection(obj) {
        var questionBox = $(obj).closest('.questionBox');
        var calendarID = questionBox.attr('calendarID');
        if (calendarID === undefined)
            calendarID = null;

        var launchCalendar = function(calID) {
            questionBox.attr('calendarID', calID);
            Kwasant.IFrame.Display('/Calendar/GetNegotiationCalendars?calendarID=' + calID,
                {
                    horizontalAlign: 'left',
                    callback: function(result) {
                        renderEvents(questionBox, $.map(result.events, function(elem, index) {
                            return {
                                startDate: elem.start.d.toDateString(),
                                startTime: padMins(elem.start.getHours()) + ':' + padMins(elem.start.getMinutes()),

                                endDate: elem.end.d.toDateString(),
                                endTime: padMins(elem.end.getHours()) + ':' + padMins(elem.end.getMinutes())
                            };
                        }));
                    }

                });
        };

        if (calendarID == null) {
            Kwasant.IFrame.DispatchUrlRequest('/Question/EditTimeslots?calendarID=null&negotiationID=' + negID, launchCalendar);
        } else {
            launchCalendar(calendarID);
        }
    }
    
    function padMins(mins) {
        if (mins < 10)
            return mins + '0';
        return mins;
    }

    function renderEvents(questionBox, events) {
        var eventWindowRenderer = questionBox.find('#eventWindowRenderer');
        eventWindowRenderer.empty();

        for (var i = 0; i < events.length; i++) {
            var currEvent = events[i];
            var eventStr = currEvent.startDate + ' ' + currEvent.startTime + ' - ' + currEvent.endTime

            var clonedHTML = $('#eventWindowRendererTemplate').clone();
            clonedHTML.html(eventStr);

            eventWindowRenderer.append(clonedHTML);
            clonedHTML.show();
        }
    }

    function addAnswer(obj, immediate) {
        var parentBox = $(obj).closest('.questionBox');
        var eventTypeButtons = parentBox.find('input[type="radio"][group="questionType"]');
        
        var selectedType = eventTypeButtons.filter(function() {
            return $(this).get(0).checked;
        });
        var clonedHTML = null;
        var eventType = selectedType.val();
        
        if (eventType === "Text") {
            clonedHTML = $('#textAnswerContainer').clone();
            parentBox.find('#appendanswerId').append(clonedHTML);
            if (immediate)
                clonedHTML.show();
            else
                clonedHTML.slideDown();
        } else if (eventType === "Timeslot") {
            clonedHTML = $('#eventWindowAnswerContainer').clone();
            parentBox.find('#appendanswerId').append(clonedHTML);
            if (immediate)
                clonedHTML.show();
            else
                clonedHTML.slideDown();
        }

        parentBox.find('#divAddAnswer').hide();
        
        eventTypeButtons.prop('disabled', true);
        eventTypeButtons.prop('title', 'Unable to change question type while answers exist.');

        return clonedHTML;
    }

    function removeQuestion(obj) {
        $(function() {
            $(obj).closest('.questionBox').slideUp("normal", function() { $(this).remove(); });
        });
    }

    function removeEventWindowAnswer(obj) {
        $(function() {
            $(obj).closest('.eventWindowAnswerBox').slideUp("normal", function() {

                var parentBox = $(obj).closest('.questionBox');

                $(this).remove();

                if (parentBox.find('.eventWindowAnswerBox').length === 0) {
                    var eventTypeButtons = parentBox.find('input[type="radio"][group="questionType"]');
                    eventTypeButtons.removeAttr('disabled');
                    eventTypeButtons.removeAttr('title', '');

                    parentBox.find('#divAddAnswer').show();
                }
            });
        });
    }

    function removeAnswer(obj) {
        $(function() {
            $(obj).closest('.answerBox').slideUp("normal", function() {
                var parentBox = $(obj).closest('.questionBox');

                $(this).remove();

                if (parentBox.find('.answerBox').length === 0) {
                    var eventTypeButtons = parentBox.find('input[type="radio"][group="questionType"]');
                    eventTypeButtons.removeAttr('disabled');
                    eventTypeButtons.removeAttr('title', '');

                    parentBox.find('#divAddAnswer').show();
                }
            });
        });
    }
    </script>
}
@section scripts
{
	@Scripts.Render("~/bundles/js/moment")
	@Scripts.Render("~/bundles/js/bootstraptransition")
	@Scripts.Render("~/bundles/js/collapse")	
	@Scripts.Render("~/bundles/js/bootstrap")
	@Scripts.Render("~/bundles/js/bootstrap-datetimepicker")
    @Scripts.Render("~/bundles/js/modernizr")	
    @Scripts.Render("~/bundles/js/common")
}
@section styles
{
    @Styles.Render("~/bundles/css/bootstrap30")
    @Styles.Render("~/bundles/css/backendcss")
    @Styles.Render("~/bundles/css/select2")
    @Styles.Render("~/bundles/css/bootstrap-datetimepicker")
	@Styles.Render("~/bundles/css/temp")
    <link href="@Url.Content("~/Content/css/additionalcss/font-awesome/css/font-awesome.css")" rel="stylesheet" type="text/css" />
    <style type="text/css">
        .questionBox {
            border-color: #D3B9B9;
            padding: 5px;
            margin-right: 10px;
            margin-bottom: 10px;
            border-style: solid;
            border-width: 1px;
        }
        .answerBox {
            border-color: #D3B9B9;
            padding: 5px;
            margin: 10px;
            border-style: solid;
            border-width: 1px;
        }
        .eventWindowAnswerBox {
            border-color: #D3B9B9;
            padding: 5px;
            margin: 10px;
            border-style: solid;
            border-width: 1px;
        }
        .eventWindowRendererTemplate {
            border-color: #D3B9B9;
            padding: 5px;
            margin: 10px;
            border-style: solid;
            border-width: 1px;
        } 
        .handIcon {
            cursor: pointer;
        }
    </style>
}

<form id="f" class="negotiationsidebar">
    <!-- The following is used to create questions-->
    <div id="questionContainer" class="questionBox">
        <table style="width: 100%">
            <tr>
                <td>
                    <label id="questionlbl">Question : </label>
                </td>
                <td>
                    <input type="text" id="questionText" name="Question" class="form-control col-md-1" />
                </td>
                <td>
                    <img src="~/Content/img/Cross.png" class="handIcon" onclick="removeQuestion(this)" />
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    Type:
                    <label>
                        <input type="radio" group="questionType" name="questionType"value="Text" checked>
                        Text    
                    </label>
                    <label>
                        <input type="radio" group="questionType" name="questionType" value="Timeslot">
                        Event Window
                    </label>
                </td>
            </tr>
        </table>
        <div id="appendanswerId">
        </div>
        <span class="form-group handIcon" id="divAddAnswer" onclick="addAnswer(this)">
            <img src="~/Content/img/plus.png" />
            <label class="handIcon">Add Answer</label>
        </span>
    </div>
    
    <div id="textAnswerContainer" class="answerBox" data-type="text">
        <table style="width: 100%">
            <tr>
                <td>
                    <img src="~/Content/img/minus.png" class="handIcon" onclick="collapseanswer(this)" />
                </td>
                <td>
                    <input type="text" name="answerText" id="answerText" class="form-control col-md-1" />
                </td>
                <td>
                    <img src="~/Content/img/Cross.png" class="handIcon" onclick="removeAnswer(this)" />
                </td>
            </tr>
            <tr>
                <td>
                    Status:
                </td>
                <td>
                    <select id="answerStatus" class="form-control">
                        <option value="1">Unstarted</option>
                        <option value="2">Proposed</option>
                        <option value="3">Selected</option>
                    </select>
                </td>
            </tr>
        </table>
    </div>
    
    <div id="eventWindowRendererTemplate" class="eventWindowRendererTemplate">

    </div>
    
    <div id="eventWindowAnswerContainer" class="eventWindowAnswerBox">
        <div id="eventWindowRenderer" >
        </div>
        <table style="width:100%">
            <tr>
                <td>
                    <a style="margin-top:10px;margin-bottom:20px;width:100%;" class="cancel-btn pull-left handIcon" name="eventWindow" onclick="startEventWindowSelection(this);">Edit Event Windows</a>            
                </td>
                <td>
                    <img src="~/Content/img/Cross.png" class="handIcon" onclick="removeEventWindowAnswer(this)" />
                </td>
            </tr>
        </table>
    </div>
    

    <div class="form-horizontal" data-negotiationId="0" id="divNegotiation">
        <h4>Negotiation</h4>
        <div class="form-group negotiation-mrbottom">
            <table style="width: 90%">
                <tr>
                    <td>&nbsp; 
                        <label>Name:</label>
                    </td>
                    <td>
                        <input type="text" id="NegName" name="NegNameId" value="Negotiation 1" class="form-control col-md-1" />
                    </td>
                </tr>
                <tr>
                    <td>&nbsp; 
                        <label>Attendees:</label>
                    </td>
                    <td>
                        <input type="hidden" name="Attendees" id="attendeesSel" />
                    </td>
                </tr>
            </table>
        </div>
        
        <div id="appendquestinoId">
        </div>

        <span class="form-group handIcon" id="divAddQuestion" onclick="addQuestion()">
            &nbsp; &nbsp;
            <img src="~/Content/img/plus.png" />
            <label class="handIcon">Add Question</label>
        </span>

        <div class="space form-actions negotiation-form-actions">
            <input id="btnSave" type="button" value="OK" class="btn btn-default pull-left" onclick="submitNegotiation()" />
            
            <a href="javascript:close();" class="cancel-btn pull-left">Cancel</a>
        </div>
    </div>
</form>
