@using Data.States
@model KwasantWeb.ViewModels.NegotiationVM
@{ Layout = "~/Views/Shared/_Blank.cshtml"; }
@section bodyStyle {overflow-y:scroll;}
@section immediateScripts
{
    @Scripts.Render("~/bundles/js/jquery")
    @Scripts.Render("~/bundles/js/select2")    
    @Scripts.Render("~/bundles/js/jqueryvalidate")

    <script src="/Content/js/common.js" type="text/javascript"></script>
    <script src="/Content/js/Kwasant/Popup.js"></script>
    <link rel="stylesheet" type="text/css" href="/Content/css/NegotiationWidgets.css" />

    <script src="/Content/js/Kwasant/NegotiationWidgets.js" type="text/javascript"></script>

    <script>
        var widget;
        $(function() {
            var settings = {
                
            };

            var questions = [
                
            ];

            var answers;
            var currentQuestion;
            var currentAnswer;
            @{
                foreach (var question in Model.Questions)
                {
                    @:currentQuestion = {};
                    @:currentQuestion.Id = @question.Id
                    @:currentQuestion.Text = '@question.Text';
                    @:currentQuestion.Type = '@question.AnswerType';
                    @:answers = [];
                    foreach (var answer in question.Answers)
                    {
                        @:currentAnswer = {};
                        @:currentAnswer.Id = @answer.Id
                        if (question.AnswerType == "Text")
                        {
                            @:currentAnswer.Text = '@answer.Text';
                        }
                        if (question.AnswerType == "Timeslot")
                        {
                            //Add event windows here... 
                        }
                        @:currentAnswer.QuestionID = @question.Id;

                        @:answers.push(currentAnswer);
                    }
                    @:currentQuestion.Answers = answers;
                    @:questions.push(currentQuestion);
                }
            }

            var initialValues = {
                Id: @(Model.Id == null? "null" : Model.Id.ToString()),
                BookingRequestID: @Model.BookingRequestID,
                Name: '@Model.Name',
                Attendees: [@Html.Raw(String.Join(",", Model.Attendees.Where(a => !String.IsNullOrEmpty(a)).Select(a => "'" + a + "'")))],
                Questions: questions
            };


            widget = $('#negotiation').NegotiationWidget(settings, initialValues);
        });
        
        function submitNegotiation() {
            var spinner = Kwasant.IFrame.DisplaySpinner();

            var negotiation = widget.getValues();
        
            //Do checks here.
            var validationErrors = [];
            $.each(negotiation.Questions, function(index, obj) {
                if (obj.Text === undefined ||
                    obj.Text === null ||
                    obj.Text === '') {
                    validationErrors.push('Please provide text for every question.');
                }
            });
        
            if (validationErrors.length > 0) {
                var errorMessage = "Please resolve the following issues before saving: \n";

                $.each(validationErrors, function(index, error) {
                    errorMessage += "\n - " + error;
                });

                alert(errorMessage);
                spinner.hide();
                return;
            }

            $.ajax({
                type: "POST",
                dataType: 'json',
                contentType: 'application/json',
                url: '/Negotiation/ProcessSubmittedForm',
                data: JSON.stringify(negotiation)
            })
            .success(function(negotiationID) {
                Kwasant.IFrame.CloseMe(negotiationID);
            })
            .fail(function() {
                alert('An error occured on the server. Your changes have not been saved.');
            })
            .always(function() {
                if (spinner !== null) {
                    spinner.hide();
                }
            });
        }
    </script>
}
@section scripts
{
	@Scripts.Render("~/bundles/js/moment")
	@Scripts.Render("~/bundles/js/bootstraptransition")
	@Scripts.Render("~/bundles/js/collapse")	
	@Scripts.Render("~/bundles/js/bootstrap")
	@Scripts.Render("~/bundles/js/bootstrap-datetimepicker")
    @Scripts.Render("~/bundles/js/modernizr")	
    @Scripts.Render("~/bundles/js/common")
}
@section styles
{
    @Styles.Render("~/bundles/css/bootstrap30")
    @Styles.Render("~/bundles/css/backendcss")
    @Styles.Render("~/bundles/css/select2")
    @Styles.Render("~/bundles/css/bootstrap-datetimepicker")
	@Styles.Render("~/bundles/css/temp")
    <link href="@Url.Content("~/Content/css/additionalcss/font-awesome/css/font-awesome.css")" rel="stylesheet" type="text/css" />
}

<form id="f" class="negotiationsidebar">
    <div id="negotiation"></div>

    <div class="space form-actions negotiation-form-actions">
        <input id="btnSave" type="button" value="OK" class="btn btn-default pull-left" onclick="submitNegotiation()" />

        <a href="javascript:close();" class="cancel-btn pull-left">Cancel</a>
    </div>
</form>