@using Data.States
@model KwasantWeb.ViewModels.EditNegotiationVM
@{ Layout = "~/Views/Shared/_Blank.cshtml"; }
@section immediateScripts
{
    @Scripts.Render("~/bundles/js/jquery")
    @Scripts.Render("~/bundles/js/select2")    
    @Scripts.Render("~/bundles/js/jqueryvalidate")

    <script src="/Content/js/Kwasant/Popup.js"></script>
    <script>
        $(function() {
            $('#questionContainer').hide();
            $('#textAnswerContainer').hide();
            $('#eventWindowAnswerContainer').hide();

            //Now we setup our values
            $('#NegName').val('@Model.Name');
            
            data = [@Html.Raw(String.Join(",", Model.Attendees.Select(a =>
                                "{id: '" + a + "', text: '" + a + "'}"
                                )))];

            $('#attendeesSel').select2({
                createSearchChoice: function (term) {
                    return { id: term, text: term };
                },
                validateFormat: function (term) {
                    if (!isEmail(term))
                        return "Invalid Email";
                    return null;
                },
                multiple: true,
                data: [],
                width: '100%',
            });
            $('#attendeesSel').select2('data', data);

            @{
                @:var question;
                @:var answer;
                foreach (var question in Model.Questions)
                {
                    @:question = $(addQuestion(true));
                    @:question.attr('questionID', @question.Id);
                    @:question.attr('questionStatus', @question.Status);
                    @:question.find('#questionText').val("@question.Text");
                    @:question.find('input[type="radio"][group="questionType"]').filter(function () { return $(this).val() === "@question.AnswerType"; }).get(0).checked = true;
                    foreach (var answer in question.Answers)
                    {
                        @:answer = $(addAnswer(question, true));
                        @:answer.attr('answerID', @answer.Id);
                        if (answer.CalendarID != null)
                        {
                            @:answer.attr('calendarID', @answer.CalendarID);
                        }
                        if (!String.IsNullOrEmpty(answer.Text))
                        {
                            @:answer.find('#answerText').val('@answer.Text');
                            @:answer.find('#answerStatus').val('@answer.AnswerState');
                        }
                    }
                }
            }
        });


        function getNegotiationData() {
            var negotiation = {};
            negotiation.Name = $('#NegName').val();
            negotiation.BookingRequestID = @Model.BookingRequestID;
            negotiation.Id = @Model.Id;
            negotiation.State = @Model.State;
            negotiation.Attendees = $('#attendeesSel').val().split(',');

            negotiation.Questions = $.map($('#appendquestinoId .questionBox'), function(element) {
                element = $(element);
                var questionID = element.attr('questionID');
                var questionStatus = element.attr('questionStatus');
                var negotiationID = negotiation.Id = @Model.Id;
                var questionText = element.find('#questionText').val();
                var selectedType = element.find('input[type="radio"][group="questionType"]').filter(function() {
                    return $(this).get(0).checked;
                }).val();

                var answerID;
                var textAnswers = $.map(element.find('#appendanswerId .answerBox'), function(answerElement) {
                    answerElement = $(answerElement);
                    answerID = answerElement.attr('answerID');
                    var answerText = answerElement.find('#answerText').val();
                    var answerStatus = answerElement.find('#answerStatus').val();

                    return { ID: answerID, QuestionID: questionID, Text: answerText, AnswerState: answerStatus };
                });

                var eventWindowAnswers = $.map(element.find('#appendanswerId .eventWindowAnswerBox'), function(answerElement) {
                    answerElement = $(answerElement);
                    answerID = answerElement.attr('answerID');
                    var calendarID = answerElement.attr('calendarID');

                    return { ID: answerID, QuestionID: questionID, CalendarID: calendarID, AnswerState: @AnswerState.Unstarted };
                });

                var i;
                var answers = [];
                for (i = 0; i < textAnswers.length; i++)
                    answers.push(textAnswers[i]);
                for (i = 0; i < eventWindowAnswers.length; i++)
                    answers.push(eventWindowAnswers[i]);

                return { Id: questionID, NegotiationID: negotiationID, Status : questionStatus, Text: questionText, AnswerType: selectedType, Answers: answers };
            });
            return negotiation;
        }

        function submitNegotiation() {
            var spinner = Kwasant.IFrame.DisplaySpinner();

            var negotiation = getNegotiationData();
            $.ajax({
                type: "POST",
                dataType: 'json',
                contentType: 'application/json',
                url: '/Negotiation/ProcessSubmittedForm',
                data: JSON.stringify(negotiation)
            })
            .success(function(data) {
                $(window.parent.document).find('#hdnnegotiationid').val(data);
                Kwasant.IFrame.CloseMe(true);
            })
            .fail(function() {
                alert('An error occured on the server. Your changes have not been saved.');
            })
            .always(function() {
                if (spinner !== null) {
                    spinner.hide();
                }
            });
        }

        function addQuestion(immediate) {
            var clonedHTML = $('#questionContainer').clone();
            
            var radioButtons = clonedHTML.find('input[type="radio"][group="questionType"]');
            var newGroupName = guid();
            radioButtons.attr('name', newGroupName);

            clonedHTML.attr('questionStatus', @QuestionState.Unanswered);

            $('#appendquestinoId').append(clonedHTML);
            if (immediate)
                clonedHTML.show();
            else
                clonedHTML.slideDown();
            return clonedHTML;
        }

        function startEventWindowSelection(obj) {
            var answerBox = $(obj).closest('.eventWindowAnswerBox');
            var calendarID = answerBox.attr('calendarID');
            if (calendarID === undefined)
                calendarID = null;

            var launchCalendar = function(calID) {
                answerBox.attr('calendarID', calID);
                Kwasant.IFrame.Display('/Calendar/GetNegotiationCalendars?calendarID=' + calID,
                    {
                        horizontalAlign: 'left',
                    });
            };

            if (calendarID == null) {
                Kwasant.IFrame.DispatchUrlRequest('/Question/EditTimeslots?calendarID=null&negotiationID=@Model.Id', launchCalendar);
            } else {
                launchCalendar(calendarID);
            }
        }

        function addAnswer(obj, immediate) {
            var parentBox = $(obj).closest('.questionBox');
            var selectedType = parentBox.find('input[type="radio"][group="questionType"]').filter(function() {
                return $(this).get(0).checked;
            });
            var clonedHTML;
            var eventType = selectedType.val();
            if (eventType === "Text") {
                clonedHTML = $('#textAnswerContainer').clone();
                parentBox.find('#appendanswerId').append(clonedHTML);
                if (immediate)
                    clonedHTML.show();
                else
                    clonedHTML.slideDown();
            } else if (eventType === "Timeslot") {
                clonedHTML = $('#eventWindowAnswerContainer').clone();
                parentBox.find('#appendanswerId').append(clonedHTML);
                if (immediate)
                    clonedHTML.show();
                else
                    clonedHTML.slideDown();
            }

            parentBox.find('#divAddAnswer').hide();
            var eventTypeButtons = parentBox.find('input[type="radio"][group="questionType"]');
            eventTypeButtons.prop('disabled', true);
            eventTypeButtons.prop('title', 'Unable to change question type while answers exist.');

            return clonedHTML;
        }

        function removeQuestion(obj) {
            $(function() {
                $(obj).closest('.questionBox').slideUp("normal", function() { $(this).remove(); });
            });
        }

        function removeEventWindowAnswer(obj) {
            $(function() {
                $(obj).closest('.eventWindowAnswerBox').slideUp("normal", function() {

                    var parentBox = $(obj).closest('.questionBox');

                    $(this).remove();

                    if (parentBox.find('.eventWindowAnswerBox').length === 0) {
                        var eventTypeButtons = parentBox.find('input[type="radio"][group="questionType"]');
                        eventTypeButtons.removeAttr('disabled');
                        eventTypeButtons.removeAttr('title', '');

                        parentBox.find('#divAddAnswer').show();
                    }
                });
            });
        }

        function removeAnswer(obj) {
            $(function() {
                $(obj).closest('.answerBox').slideUp("normal", function() {
                    var parentBox = $(obj).closest('.questionBox');

                    $(this).remove();

                    if (parentBox.find('.answerBox').length === 0) {
                        var eventTypeButtons = parentBox.find('input[type="radio"][group="questionType"]');
                        eventTypeButtons.removeAttr('disabled');
                        eventTypeButtons.removeAttr('title', '');
                        
                        parentBox.find('#divAddAnswer').show();
                    }
                });
            });
        }
    </script>
}
@section scripts
{
	@Scripts.Render("~/bundles/js/moment")
	@Scripts.Render("~/bundles/js/bootstraptransition")
	@Scripts.Render("~/bundles/js/collapse")	
	@Scripts.Render("~/bundles/js/bootstrap")
	@Scripts.Render("~/bundles/js/bootstrap-datetimepicker")
    @Scripts.Render("~/bundles/js/modernizr")	
    @Scripts.Render("~/bundles/js/common")
}
@section styles
{
    @Styles.Render("~/bundles/css/bootstrap30")
    @Styles.Render("~/bundles/css/backendcss")
    @Styles.Render("~/bundles/css/select2")
    @Styles.Render("~/bundles/css/bootstrap-datetimepicker")
	@Styles.Render("~/bundles/css/temp")
    <link href="@Url.Content("~/Content/css/additionalcss/font-awesome/css/font-awesome.css")" rel="stylesheet" type="text/css" />
}
<div class="light-bg">
<form id="f" class="edit-event-form form negotiationsidebar">
    <!-- The following is used to create questions-->
    <div id="questionContainer" class="form-horizontal questionBox">
		<div class="formItem">
			<div class="formLabel" id="questionlbl">Question</div>
			<div class="input-group">				
				<input type="text" id="questionText" name="Question" class="form-control col-md-1" />
				<span class="input-group-btn">
					<button class="btn btn-default" type="button" onclick="removeQuestion(this)"><span class="glyphicon glyphicon-remove"></span></button>
				</span>
			</div>
		</div>
        <table width="100%">
            <tr>
                <td>
                    Type:
                    <label>
                        <input type="radio" group="questionType" name="questionType"value="Text" checked>
                        Text    
                    </label>
                    <label>
                        <input type="radio" group="questionType" name="questionType" value="Timeslot">
                        Event Window
                    </label>
                </td>
            </tr>
        </table>
        <div id="appendanswerId"></div>
		<div class="formItem">
			<span class="custom-btn btn-grey glyphicon glyphicon-plus" id="divAddAnswer" onclick="addAnswer(this)">Add Answer</span>
		</div>
	</div>
    
    <div id="textAnswerContainer" class="answerBox" data-type="text">
        <table style="width: 100%">
            <tr>
                <td>
                    <img src="~/Content/img/minus.png" class="handIcon" onclick="collapseanswer(this)" />
                </td>
                <td>
					<div class="input-group">
						<input type="text" name="answerText" id="answerText" class="form-control col-md-1" />
						<span class="input-group-btn">
							<button class="btn btn-default handIcon" type="button" onclick="removeAnswer(this)"><span class="glyphicon glyphicon-remove"></span></button>
						</span>
					</div>
                </td>
            </tr>
            <tr>
                <td>Status:</td>
                <td>
                    <select id="answerStatus" class="form-control">
                        <option value="1">Unstarted</option>
                        <option value="2">Proposed</option>
                        <option value="3">Selected</option>
                    </select>
                </td>
            </tr>
        </table>
    </div>
    
    <div id="eventWindowAnswerContainer" class="eventWindowAnswerBox">
        <table width="100%">
            <tr>
                <td>
					<a class="custom-btn btn-grey glyphicon glyphicon-calendar handIcon" name="eventWindow" onclick="startEventWindowSelection(this);">Select Event Windows</a>            
                </td>
                <td align="right">
					<span class="glyphicon glyphicon-remove" onclick="removeEventWindowAnswer(this)"></span>
                </td>
            </tr>
        </table>
    </div>    

    <div class="form-horizontal" data-negotiationId="0" id="divNegotiation">
		<h3 class="with-border">Negotiation</h3>
		<div class="negotiation-mrbottom">
			<div class="formItem">
				<div class="formLabel">Name</div>
				<input type="text" id="NegName" name="NegNameId" value="Negotiation 1" class="form-control col-md-1" />
			</div>
			<div class="formItem">
				<div class="formLabel">Attendees</div>
				<input type="hidden" name="Attendees" id="attendeesSel" />
			</div>
		</div>			
	</div>
        
    <div id="appendquestinoId"></div>
	<div class="formItem">
		<span class="custom-btn btn-grey glyphicon glyphicon-plus" id="divAddQuestion" onclick="addQuestion()">Add Question</span>
	</div>

    <div class="space form-actions negotiation-form-actions">
        <input id="btnSave" type="button" value="OK" class="btn btn-default pull-left" onclick="submitNegotiation()" />            
        <a href="javascript:close();" class="cancel-btn pull-left">Cancel</a>
	</div>
	</form>
</div>
