using System;
using System.Linq;
using System.Web.Mvc;
using Data.Entities;
using Data.Interfaces;
using Data.States;
using KwasantCore.Services;
using KwasantWeb.ViewModels;
using StructureMap;
<<<<<<< HEAD
using System.Web.Script.Serialization;
using Data.Repositories;
using Utilities;
using ViewModel.Models;
using AutoMapper;
=======
>>>>>>> dev


namespace KwasantWeb.Controllers
{
    //[KwasantAuthorize(Roles = "Admin")]
    public class NegotiationController : Controller
    {
<<<<<<< HEAD
        private Negotiation _negotiation;
        private Attendee _attendee;
        private IMappingEngine _mappingEngine;

        public NegotiationController()
        {
            _negotiation = new Negotiation();
            _attendee = new Attendee();
            _mappingEngine = Mapper.Engine; // should be injected
        }

        public ActionResult Edit(int bookingRequestID)
        {
            return View(new EditNegotiationVM() { RequestId = bookingRequestID });
        }

        public ActionResult Create(int bookingRequestId)
        {
            using (var uow = ObjectFactory.GetInstance<IUnitOfWork>())
            {
                BookingRequestDO emailDO = uow.BookingRequestRepository.FindOne(el => el.Id == bookingRequestId);
                UserDO userDO = uow.UserRepository.FindOne(ur => ur.EmailAddressID == emailDO.FromID);

                //NEED TO CHECK HERE TO SEE IF THERE ALREADY IS ONE. SOMETHING LIKE:
                NegotiationDO negotiationDO = uow.NegotiationsRepository.FindOne(n => n.BookingRequestID == bookingRequestId && n.NegotiationState != NegotiationState.Resolved);
                if (negotiationDO != null)
                    throw new ApplicationException("tried to create a negotiation when one already existed");

                negotiationDO = new NegotiationDO
                {
                    Name = "Negotiation",
                    BookingRequestID = bookingRequestId,
                    NegotiationState = NegotiationState.InProcess,
                    BookingRequest = emailDO
=======
        
        public ActionResult Edit(int negotiationID)
        {
            using (var uow = ObjectFactory.GetInstance<IUnitOfWork>())
            {
                var negotiationDO = uow.NegotiationsRepository.GetQuery().FirstOrDefault(n => n.Id == negotiationID);
                if (negotiationDO == null)
                    throw new ApplicationException("Negotiation with ID " + negotiationID + " does not exist.");
                
                var model = new NegotiationViewModel
                {
                    Id = negotiationDO.Id,
                    Name = negotiationDO.Name,
                    BookingRequestID = negotiationDO.BookingRequestID,
                    State = negotiationDO.NegotiationState,
                    Attendees = negotiationDO.Attendees.Select(a => a.Name).ToList(),
                    Questions = negotiationDO.Questions.Select(q =>
                        new QuestionViewModel
                        {
                            AnswerType = q.AnswerType,
                            Id = q.Id,
                            Status = q.QuestionStatus,
                            Text = q.Text,
                            NegotiationId = negotiationDO.Id,
                            Answers = q.Answers.Select(a =>
                            new AnswerViewModel
                            {
                                AnswerState = a.AnswerStatus,
                                Id = a.Id,
                                QuestionID = q.Id,
                                Text = a.Text,
                                ObjectsType = a.ObjectsType,
                                CalendarID = a.CalendarID
                            }).ToList()
                        }
                        ).ToList()
>>>>>>> dev
                };

                return View(model);
            }
        }


        public ActionResult Create(int bookingRequestID)
        {
            return View("~/Views/Negotiation/Edit.cshtml", new NegotiationViewModel
            {
<<<<<<< HEAD
                //NegotiationViewModel NegotiationQuestions = new Negotiations().getNegotiation(uow, id);
                var curNegotiationDO = uow.NegotiationsRepository.GetAll().FirstOrDefault(e => e.BookingRequestID == id && e.NegotiationState != NegotiationState.Resolved);
                var curNegotiationViewModel = _mappingEngine.Map<EditNegotiationVM>(curNegotiationDO);
/*
                NegotiationViewModel NegotiationQuestions = uow.NegotiationsRepository.GetAll().Where(e => e.BookingRequestID == id && e.NegotiationState != NegotiationState.Resolved).Select(s => new NegotiationViewModel
                {
                    Id = s.Id,
                    Name = s.Name,
                    RequestId = viewModel.RequestId,
                    State = s.NegotiationState,

                    Questions = uow.QuestionsRepository.GetAll().Where(que => que.NegotiationId == s.Id).Select(quel => new QuestionViewModel
                    {
                        Id = quel.Id,
                        Text = quel.Text,
                        Status = quel.QuestionStatus,
                        NegotiationId = quel.NegotiationId,
                        AnswerType = quel.AnswerType,
                        Answers = uow.AnswersRepository.GetAll().Where(ans => ans.QuestionID == quel.Id).Select(ansl => new AnswerViewModel
                        {
                            Id = ansl.Id,
                            QuestionID = ansl.QuestionID,
                            AnswerStatusID = ansl.AnswerStatus,
                            //Status = ansl.AnswerStatus,
                            ObjectsType = ansl.ObjectsType,
                        }).ToList()
                    }).ToList()
                }).FirstOrDefault();
*/

                //return View(NegotiationQuestions);
                return Json(curNegotiationViewModel, JsonRequestBehavior.AllowGet);
            }
=======
                Name = "Negotiation 1",
                BookingRequestID = bookingRequestID,
                State = NegotiationState.InProcess,
            });
>>>>>>> dev
        }

        [HttpPost]
        public JsonResult ProcessSubmittedForm(NegotiationViewModel value)
        {
<<<<<<< HEAD
            object result;
            try
=======
            using (var uow = ObjectFactory.GetInstance<IUnitOfWork>())
>>>>>>> dev
            {
                NegotiationDO negotiationDO;
                if (value.Id == 0)
                {
<<<<<<< HEAD

                    //Update Negotiation
                    NegotiationDO existingNegotiationDO = uow.NegotiationsRepository.GetByKey(curVM.Id);
                    NegotiationDO updatedNegotiationDO = _mappingEngine.Map(curVM, existingNegotiationDO);
                    //updatedNegotiationDO = _negotiation.Update(newNegotiationData, existingNegotiationDO);

                    //this takes the form data and processes it similarly to how its done in the Edit Event form
                    //IMPORTANT: the code in Attendee.cs was refactored and needs testing.
                    _attendee.ManageNegotiationAttendeeList(uow, updatedNegotiationDO, curVM.AttendeeList); //see

                    uow.SaveChanges();
                    //SEE https://maginot.atlassian.net/wiki/display/SH/CRUD+for+Questions%2C+Answers%2C+Negotiations

                    //Process Negotiation
                    _negotiation.Process(updatedNegotiationDO);
                    //set result to a success message
                    result =
                        new
                        {
                            Success = "True",
                            BookingRequestID = updatedNegotiationDO.BookingRequest.Id,
                            NegotiationId = updatedNegotiationDO.Id
                        };


                }
            }
            catch (Exception)
            {
                //set result to an error message
                result =
                    new
                    {
                        Success = "False",
                        BookingRequestID = curVM.RequestId,
                        NegotiationId = curVM.Id
                    };
            }
=======
                    negotiationDO = new NegotiationDO();
                    uow.NegotiationsRepository.Add(negotiationDO);
                }
                else
                    negotiationDO = uow.NegotiationsRepository.GetByKey(value.Id);
>>>>>>> dev

                negotiationDO.Name = value.Name;
                negotiationDO.NegotiationState = value.State;
                negotiationDO.BookingRequestID = value.BookingRequestID;

                var attendee = new Attendee();
                attendee.ManageNegotiationAttendeeList(uow, negotiationDO, value.Attendees);

                var proposedQuestionIDs = value.Questions.Select(q => q.Id);
                //Delete the existing questions which no longer exist in our proposed negotiation
                var existingQuestions = negotiationDO.Questions.ToList();
                foreach (var existingQuestion in existingQuestions.Where(q => !proposedQuestionIDs.Contains(q.Id)))
                {
                    uow.QuestionsRepository.Remove(existingQuestion);
                }

<<<<<<< HEAD
            return PartialView("_Question", questionVal);
        }

        [HttpGet]
        public PartialViewResult AddTextAnswer(int bookingRequestId, int answerID, int questiontblID = 0)
        {
            List<int> ansVal = new List<int>();
            ansVal.Add(answerID);

            if (questiontblID > 0)
            {
                using (var uow = ObjectFactory.GetInstance<IUnitOfWork>())
                {
                    EmailDO emailDO = uow.EmailRepository.FindOne(el => el.Id == bookingRequestId);
                    UserDO userDO = uow.UserRepository.FindOne(ur => ur.EmailAddressID == emailDO.FromID);
                    AnswerDO answerDO = new AnswerDO
=======
                //Here we add/update questions based on our proposed negotiation
                foreach (var question in value.Questions)
                {
                    QuestionDO questionDO;
                    if (question.Id == 0)
>>>>>>> dev
                    {
                        questionDO = new QuestionDO();
                        uow.QuestionsRepository.Add(questionDO);
                    }
                    else
                        questionDO = uow.QuestionsRepository.GetByKey(question.Id);

                    questionDO.Negotiation = negotiationDO;
                    questionDO.AnswerType = question.AnswerType;
                    questionDO.QuestionStatus = question.Status;
                    questionDO.Text = question.Text;

                    var proposedAnswerIDs = question.Answers.Select(a => a.Id);
                    //Delete the existing answers which no longer exist in our proposed negotiation
                    var existingAnswers = questionDO.Answers.ToList();
                    foreach (var existingAnswer in existingAnswers.Where(a => !proposedAnswerIDs.Contains(a.Id)))
                    {
                        uow.AnswersRepository.Remove(existingAnswer);
                    }

                    foreach (var answer in question.Answers)
                    {
                        AnswerDO answerDO;
                        if (answer.Id == 0)
                        {
                            answerDO = new AnswerDO();
                            uow.AnswersRepository.Add(answerDO);
                        }
                        else
                            answerDO = uow.AnswersRepository.GetByKey(answer.Id);

                        answerDO.Question = questionDO;
                        answerDO.AnswerStatus = answer.AnswerState;
                        answerDO.CalendarID = answer.CalendarID;
                        answerDO.Text = answer.Text;
                        answer.ObjectsType = answer.ObjectsType;
                    }
                }
<<<<<<< HEAD
            }
            else
                ansVal.Add(0);

            return PartialView("_TextAnswer", ansVal);
        }

        public PartialViewResult AddTimeslotAnswer(int answerID)
        {
            return PartialView("_TimeslotAnswer", answerID);
        }

        public ActionResult EventWindows(int bookingRequestId, int id = 0)
        {
            if (id <= 0)
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            using (var uow = ObjectFactory.GetInstance<IUnitOfWork>())
            {
                IBookingRequestRepository bookingRequestRepository = uow.BookingRequestRepository;
                var bookingRequestDO = bookingRequestRepository.GetByKey(bookingRequestId);
                if (bookingRequestDO == null)
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

                //return View(bookingRequestDO);
                return View(new CalendarViewModel
                {
                    BookingRequestID = bookingRequestDO.Id,
                    LinkedCalendarIDs = bookingRequestDO.Calendars.Select(calendarDO => calendarDO.Id).ToList(),
=======
>>>>>>> dev

                uow.SaveChanges();
            }

            return Json(true, JsonRequestBehavior.AllowGet);
        }
    }
}